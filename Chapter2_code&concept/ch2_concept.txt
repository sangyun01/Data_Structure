Ch2.1 Goals, Principles, and Patterns / 목표, 원리, 그리고 패턴 (p.10 ~ 19)
객체지향의 설계 목표는 총 3가지이다.
Robustness(견고성)      - 예상치 못한 입력에 대응할 수 있다.
Adaptability(적응성)    - 다른 HW나 운영체제에서도 최소한의 변화로 소프트웨어가 실행되어야 한다.
Reusability(재활용성)   - 다른 분야의 응용에 쉽게 사용할 수 있어야 한다.

객체지향의 설게 원리는 3개이다.
Abstraction(추상화)     - distill a complicated system down to its most fundamental parts / 복잡한 시스템으로부터 가장 근본적인 부분을 추출한다.
Encapsulation(캡슐화)   - should not reveal the internal details of their respective implementations / 구현의 내부사항이 외부로 드러나지 않아야 한다.
Modularity(모듈화)      - different components of a SW system are divided into separate functional units / 올바르게 상호작용하도록 구성요소가 잘 조직화되어야 한다.

Hierarchical organization(계층적 조직화) - 가장 추천하는 방식
is a 관계로 각각의 링크가 연결되어 있다.

Ch2.2 Inheritance and Polymorphism / 상속과 다형성 (p.20 ~ 61)
Inheritance(상속)
class를 사용하면서 크게 2가지로 데이터를 분류가 가능하다. -> 상위정보들, 하위정보들
ex) 동물(상위정보) -> 강아지(하위정보)
하위정보는 동물의 정보도 가지고 있다. 이러한 상황을 상속이라 한다.
모든 요소에 공통된 정보(generic class)와 각 요소들에 대해 특정된 정보(specialized classes)로 선언을 한다.
generic class -> base class, parents class, superclass라고도 부른다. ex) class Person
derived class -> child class, subclass라고도 부른다. ex) class Student : public Person // is a relationship -> Student is a Person
따라서 Person에서 pubilc이라면 Student에서도 마찬가지로 public이다. 

protected 멤버
자식 클래스가 부모 클래스로부터 상속을 받더라도 private변수를 가져오는 것은 불가능 함.
그렇기에 함수를 호출하는데 있어 제약이 발생한다. 이를 해결하기 위해서 protected 멤버 -> 상속을 받는 클래스는 접근이 가능하다.

Student student("A", "B", "C", 1234)와 Student *s = new Student("A", "B", "C", 1234)는 동일하다.

생성자의 경우는 부모 클래스를 먼저 생성 후, 자식 클래스를 생성하였다.
하지만, 소멸자의 경우는 자식 클래스를 먼저 제거한 후, 부모 클래스를 이후에 삭제해야 한다. // calls ~Student() then ~Person()

Static Binding(정적 바인딩)
compile을 진행하면서 어떤 함수를 호출하는지 결정이 된다.
-기본적으로는 declared type(선언된 타입)을 기준으로 호출한다.   - default action is to consider an objects' declared type
ex)
Person* pp[100]; // Person 100개의 포인터 배열 선언
pp[0] = new Person();   // Person 1명
pp[1] = new Student();  // Student 1명 추가

pp[0]->print(); //둘다 Person의 print함수 호출
pp[1]->print(); //

Virtual function(가상 함수)
virtual void print()를 base class(public)에서 선언
pp[0]->print(); //  Person의 print함수 호출
pp[1]->print(); //  Student의 print함수 호출하는데(dynamic binding)

다시 말해, 컴파일러는 일단 Person*으로 선언된 부분을 우선적으로 본다.
하지만 만약 virtual이 있다면 재확인하여 Student함수를 호출하도록 한다.  - in dynamic binding, objects contents determine which member function is called.
print 함수 앞에 virtual void print()를 선언한다면, 선언된 각각의 배열 type에 맞추어 작동하도록 한다. - base class(parents class)만 선언한다면 subclass도 자동 선언된

Virtual Destructors(가상 소멸자)
생성자는(constructor) 선언을 하면서 type을 중요시하기에 가상 생성자는 존재하지 않는다.
하지만, 소멸자의 경우 virtual function을 사용하면서 생성된 메모리 할당을 완전히 제거해주기 위해서는 virtual destructors가 필요로 한다.
=> 즉 상속(Inheritance)을 사용한다면 무조건 virtual destructors를 사용해야 한다.
선언하지 않는다면, base class만 사라지고, subclass의 메모리는 그대로 유지되어 메모리 누수가 발생하게 된다.

Polymorphism(다형성)
변수가 여러 타입을 가질 수 있음 - ability of variable to take different types
if) p->a() 호출한다.
p pointer는 T타입의 객체를 가르킨다. -> 그러면 T::a()를 호출한다.   //override
p pointer는 S타입의 객체를 가르킨다. -> 그러면 S::a()를 호출한다.   //override

Specialization(특수화) - Polymorphism
could require that override sniff function -> 자식 클래스를 더 구체화하여 정의가 가능하다.

Extension(확장) - Polymorphism
add new functions that are not present in base class -> 자식 클래스에 새로운 함수를 추가하여 작성한다.

example of code Inheritance where the ch.2_Inheritance
Algorithm of code ->
Arithmetic(등차수열), Geometric(등비수열)

Ch2.3 Templates / - (p.62 ~ 65)
Function Templates() -> 하나의 타입이 아닌 여러타입에서 함수를 사용할 수 있도록 선언을 함

지금까지는 하나의 자료형을 선언하여 함수를 정의했다.
int integerMin(int a, int b)    {
    return (a < b ? a : b)
}
//using function templates
template<typename T>
T genericMin(T a, T b) {
    return (a < b ? a : b)
}

이때 a는 double 형 b는 int 형이라면 오류가 발생하게 된다.
