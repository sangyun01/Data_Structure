Ch5.1 Stacks / 스택 (p.2 ~ 22)
Stacks is LIFO structure. (Last input First output)
Stacks's fundamental operations is pushing(삽입) and popping(꺼내기)
when add, push it down on the stack to become new top plate.
when remove, pop the plate off stack.

About Stacks structure ADT(abstract data type)
push(e), pop(), top() / additionally size(), empty()
function explain
push    -> input element at top
pop     -> delete element at top
top     -> return the element value at top
size    -> count the number of element
empty   -> define the list is empty -> if empty and using top or pop function than print error message

the advantage of stack is not move the element when we add or delete the element.
if using the array, we remove or add the element then move the index.
usally we set the t = -1 // so value t is -1, it means empty list.

Ch5.2 Queues / 큐 (p.23 ~ 44)
Queues is FIFO structure. (First input First output)
It means enter queue at rear(input method) and remove queue at front(output method)

About Queues structure ADT operations
enqueue()   -> input the data at rear
dequeue()   -> output the data at front
front()     -> not the output the data, only return the data at front
empty()     -> check the list is empty
size()      -> 0~n-1 -> n variable

already provide the header file <queue>
size(), empty(), push(e) -> it means enqueue, pop() -> it means dequeue, front(), back()
Thus it similar structure circular linked list.
so we set three variable to using circular
f(front), r(rear, it point rear next point like at insert the element locate), n(current)

Ch5.3. Double-Ended Queues / ~ (p.45 ~ 58)
we pronounced deck about Double-Ended Queues

already also exist header file <deque>
size(), empty(), front(), back()
push_front(), push_back(), pop_front(), pop_back()

using class D

also we can apated the class stack and queue made by deque
using the some of the function about deque